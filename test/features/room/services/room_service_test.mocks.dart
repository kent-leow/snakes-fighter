// Mocks generated by Mockito 5.4.4 from annotations
// in snakes_fight/test/features/room/services/room_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:firebase_auth/firebase_auth.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:snakes_fight/core/models/models.dart' as _i2;
import 'package:snakes_fight/core/services/auth_service.dart' as _i6;
import 'package:snakes_fight/core/services/database_service.dart' as _i4;
import 'package:snakes_fight/core/services/room_code_service.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeRoom_0 extends _i1.SmartFake implements _i2.Room {
  _FakeRoom_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_1<T1> extends _i1.SmartFake implements _i3.Future<T1> {
  _FakeFuture_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i4.DatabaseService {
  MockDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.Room> createRoom(_i2.Room? room) => (super.noSuchMethod(
        Invocation.method(
          #createRoom,
          [room],
        ),
        returnValue: _i3.Future<_i2.Room>.value(_FakeRoom_0(
          this,
          Invocation.method(
            #createRoom,
            [room],
          ),
        )),
      ) as _i3.Future<_i2.Room>);

  @override
  _i3.Future<_i2.Room?> getRoomById(String? roomId) => (super.noSuchMethod(
        Invocation.method(
          #getRoomById,
          [roomId],
        ),
        returnValue: _i3.Future<_i2.Room?>.value(),
      ) as _i3.Future<_i2.Room?>);

  @override
  _i3.Future<_i2.Room?> getRoomByCode(String? roomCode) => (super.noSuchMethod(
        Invocation.method(
          #getRoomByCode,
          [roomCode],
        ),
        returnValue: _i3.Future<_i2.Room?>.value(),
      ) as _i3.Future<_i2.Room?>);

  @override
  _i3.Future<void> updateRoom(_i2.Room? room) => (super.noSuchMethod(
        Invocation.method(
          #updateRoom,
          [room],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteRoom(String? roomId) => (super.noSuchMethod(
        Invocation.method(
          #deleteRoom,
          [roomId],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Stream<_i2.Room?> watchRoom(String? roomId) => (super.noSuchMethod(
        Invocation.method(
          #watchRoom,
          [roomId],
        ),
        returnValue: _i3.Stream<_i2.Room?>.empty(),
      ) as _i3.Stream<_i2.Room?>);

  @override
  _i3.Future<void> addPlayerToRoom(
    String? roomId,
    _i2.Player? player,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addPlayerToRoom,
          [
            roomId,
            player,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> removePlayerFromRoom(
    String? roomId,
    String? playerId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removePlayerFromRoom,
          [
            roomId,
            playerId,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updatePlayer(
    String? roomId,
    _i2.Player? player,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePlayer,
          [
            roomId,
            player,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Stream<Map<String, _i2.Player>> watchRoomPlayers(String? roomId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchRoomPlayers,
          [roomId],
        ),
        returnValue: _i3.Stream<Map<String, _i2.Player>>.empty(),
      ) as _i3.Stream<Map<String, _i2.Player>>);

  @override
  _i3.Future<void> updateGameState(
    String? roomId,
    _i2.GameState? gameState,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateGameState,
          [
            roomId,
            gameState,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Stream<_i2.GameState?> watchGameState(String? roomId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchGameState,
          [roomId],
        ),
        returnValue: _i3.Stream<_i2.GameState?>.empty(),
      ) as _i3.Stream<_i2.GameState?>);

  @override
  _i3.Future<T> runAtomicOperation<T>(_i3.Future<T> Function()? operation) =>
      (super.noSuchMethod(
        Invocation.method(
          #runAtomicOperation,
          [operation],
        ),
        returnValue: _i5.ifNotNull(
              _i5.dummyValueOrNull<T>(
                this,
                Invocation.method(
                  #runAtomicOperation,
                  [operation],
                ),
              ),
              (T v) => _i3.Future<T>.value(v),
            ) ??
            _FakeFuture_1<T>(
              this,
              Invocation.method(
                #runAtomicOperation,
                [operation],
              ),
            ),
      ) as _i3.Future<T>);

  @override
  _i3.Future<void> batchUpdate(Map<String, dynamic>? updates) =>
      (super.noSuchMethod(
        Invocation.method(
          #batchUpdate,
          [updates],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [AuthService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthService extends _i1.Mock implements _i6.AuthService {
  MockAuthService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i7.User?> get authStateChanges => (super.noSuchMethod(
        Invocation.getter(#authStateChanges),
        returnValue: _i3.Stream<_i7.User?>.empty(),
      ) as _i3.Stream<_i7.User?>);

  @override
  bool get isSignedIn => (super.noSuchMethod(
        Invocation.getter(#isSignedIn),
        returnValue: false,
      ) as bool);

  @override
  bool get isAnonymous => (super.noSuchMethod(
        Invocation.getter(#isAnonymous),
        returnValue: false,
      ) as bool);

  @override
  String get userDisplayName => (super.noSuchMethod(
        Invocation.getter(#userDisplayName),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#userDisplayName),
        ),
      ) as String);

  @override
  _i3.Future<_i7.UserCredential?> signInAnonymously() => (super.noSuchMethod(
        Invocation.method(
          #signInAnonymously,
          [],
        ),
        returnValue: _i3.Future<_i7.UserCredential?>.value(),
      ) as _i3.Future<_i7.UserCredential?>);

  @override
  _i3.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<_i7.UserCredential?> signInWithGoogle() => (super.noSuchMethod(
        Invocation.method(
          #signInWithGoogle,
          [],
        ),
        returnValue: _i3.Future<_i7.UserCredential?>.value(),
      ) as _i3.Future<_i7.UserCredential?>);

  @override
  _i3.Future<_i7.UserCredential?> linkAnonymousWithGoogle() =>
      (super.noSuchMethod(
        Invocation.method(
          #linkAnonymousWithGoogle,
          [],
        ),
        returnValue: _i3.Future<_i7.UserCredential?>.value(),
      ) as _i3.Future<_i7.UserCredential?>);

  @override
  _i3.Future<String?> getStoredUserId() => (super.noSuchMethod(
        Invocation.method(
          #getStoredUserId,
          [],
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  _i3.Future<bool> getStoredAnonymousStatus() => (super.noSuchMethod(
        Invocation.method(
          #getStoredAnonymousStatus,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> deleteAnonymousUser() => (super.noSuchMethod(
        Invocation.method(
          #deleteAnonymousUser,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [RoomCodeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockRoomCodeService extends _i1.Mock implements _i8.RoomCodeService {
  MockRoomCodeService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<String> generateUniqueRoomCode() => (super.noSuchMethod(
        Invocation.method(
          #generateUniqueRoomCode,
          [],
        ),
        returnValue: _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #generateUniqueRoomCode,
            [],
          ),
        )),
      ) as _i3.Future<String>);
}
