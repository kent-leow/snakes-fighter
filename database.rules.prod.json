{
  "rules": {
    "rooms": {
      ".indexOn": ["roomCode", "createdAt", "status"],
      "$roomId": {
        ".read": "auth != null && (data.child('players').child(auth.uid).exists() || (!data.exists() && auth.uid != null))",
        ".write": "auth != null && (newData.child('players').child(auth.uid).exists() || !data.exists())",
        ".validate": "newData.hasChildren(['roomCode', 'hostId', 'status', 'createdAt', 'maxPlayers'])",
        
        "roomCode": {
          ".validate": "newData.isString() && newData.val().matches(/^[A-Z0-9]{6}$/)"
        },
        
        "hostId": {
          ".validate": "newData.isString() && newData.val().length > 0"
        },
        
        "status": {
          ".validate": "newData.isString() && newData.val().matches(/^(waiting|active|ended)$/)"
        },
        
        "maxPlayers": {
          ".validate": "newData.isNumber() && newData.val() >= 2 && newData.val() <= 4"
        },
        
        "createdAt": {
          ".validate": "newData.isNumber() && newData.val() <= now"
        },
        
        "players": {
          ".validate": "newData.hasChildren() && newData.numChildren() <= data.parent().child('maxPlayers').val()",
          "$playerId": {
            ".write": "auth != null && ($playerId == auth.uid || data.parent().parent().child('hostId').val() == auth.uid)",
            ".validate": "newData.hasChildren(['uid', 'displayName', 'color', 'joinedAt'])",
            
            "uid": {
              ".validate": "newData.isString() && newData.val() == $playerId"
            },
            
            "displayName": {
              ".validate": "newData.isString() && newData.val().length >= 1 && newData.val().length <= 20"
            },
            
            "color": {
              ".validate": "newData.isString() && newData.val().matches(/^(red|blue|green|yellow)$/)"
            },
            
            "joinedAt": {
              ".validate": "newData.isNumber() && newData.val() <= now"
            },
            
            "isReady": {
              ".validate": "newData.isBoolean()"
            },
            
            "isConnected": {
              ".validate": "newData.isBoolean()"
            },
            
            "lastActive": {
              ".validate": "newData.isNumber() && newData.val() <= now"
            }
          }
        },
        
        "gameState": {
          ".write": "auth != null && data.parent().child('players').child(auth.uid).exists() && data.parent().child('status').val() == 'active'",
          ".validate": "newData.hasChildren(['startedAt', 'food', 'snakes'])",
          
          "startedAt": {
            ".validate": "newData.isNumber() && newData.val() <= now"
          },
          
          "lastUpdate": {
            ".validate": "newData.isNumber() && newData.val() <= now"
          },
          
          "food": {
            ".validate": "newData.hasChildren(['x', 'y']) && newData.child('x').isNumber() && newData.child('y').isNumber() && newData.child('x').val() >= 0 && newData.child('x').val() < 20 && newData.child('y').val() >= 0 && newData.child('y').val() < 20"
          },
          
          "snakes": {
            "$playerId": {
              ".write": "auth != null && ($playerId == auth.uid || root.child('functions').child('serverValidation').val() == true)",
              ".validate": "newData.hasChildren(['positions', 'direction', 'alive', 'score'])",
              
              "positions": {
                ".validate": "newData.isString() && newData.val().length > 0"
              },
              
              "direction": {
                ".validate": "newData.isString() && newData.val().matches(/^(up|down|left|right)$/)"
              },
              
              "alive": {
                ".validate": "newData.isBoolean()"
              },
              
              "score": {
                ".validate": "newData.isNumber() && newData.val() >= 0 && newData.val() <= 10000"
              },
              
              "lastMove": {
                ".validate": "newData.isNumber() && newData.val() <= now"
              }
            }
          }
        },
        
        "settings": {
          ".validate": "newData.hasChildren()",
          "gameSpeed": {
            ".validate": "newData.isNumber() && newData.val() >= 100 && newData.val() <= 1000"
          },
          "boardSize": {
            ".validate": "newData.isString() && newData.val().matches(/^(small|medium|large)$/)"
          }
        }
      }
    },
    
    "users": {
      ".indexOn": ["lastActive"],
      "$userId": {
        ".read": "auth != null && $userId == auth.uid",
        ".write": "auth != null && $userId == auth.uid",
        ".validate": "newData.hasChildren(['displayName', 'isAnonymous'])",
        
        "displayName": {
          ".validate": "newData.isString() && newData.val().length >= 1 && newData.val().length <= 20"
        },
        
        "isAnonymous": {
          ".validate": "newData.isBoolean()"
        },
        
        "email": {
          ".validate": "newData.isString() && newData.val().matches(/^[^@]+@[^@]+\\.[^@]+$/)"
        },
        
        "createdAt": {
          ".validate": "newData.isNumber() && newData.val() <= now"
        },
        
        "lastActive": {
          ".validate": "newData.isNumber() && newData.val() <= now"
        },
        
        "stats": {
          ".validate": "newData.hasChildren()",
          "gamesPlayed": {
            ".validate": "newData.isNumber() && newData.val() >= 0 && newData.val() <= 100000"
          },
          
          "gamesWon": {
            ".validate": "newData.isNumber() && newData.val() >= 0 && newData.val() <= data.parent().child('gamesPlayed').val()"
          },
          
          "totalScore": {
            ".validate": "newData.isNumber() && newData.val() >= 0"
          },
          
          "averageScore": {
            ".validate": "newData.isNumber() && newData.val() >= 0"
          }
        },
        
        "preferences": {
          ".validate": "newData.hasChildren()",
          "soundEnabled": {
            ".validate": "newData.isBoolean()"
          },
          
          "theme": {
            ".validate": "newData.isString() && newData.val().matches(/^(light|dark|auto)$/)"
          }
        }
      }
    },
    
    "rateLimiting": {
      "$userId": {
        ".read": "auth != null && $userId == auth.uid",
        ".write": "auth != null && $userId == auth.uid",
        
        "lastWrite": {
          ".validate": "newData.isNumber() && newData.val() <= now"
        },
        
        "writeCount": {
          ".validate": "newData.isNumber() && newData.val() >= 0"
        },
        
        "windowStart": {
          ".validate": "newData.isNumber() && newData.val() <= now"
        }
      }
    },
    
    "errorLogs": {
      ".read": "false",
      ".write": "auth != null",
      "$errorId": {
        ".validate": "newData.hasChildren(['timestamp', 'level', 'message', 'userId'])",
        
        "timestamp": {
          ".validate": "newData.isNumber() && newData.val() <= now"
        },
        
        "level": {
          ".validate": "newData.isString() && newData.val().matches(/^(info|warning|error|critical)$/)"
        },
        
        "message": {
          ".validate": "newData.isString() && newData.val().length <= 1000"
        },
        
        "userId": {
          ".validate": "newData.isString() && newData.val() == auth.uid"
        },
        
        "context": {
          ".validate": "newData.isString() && newData.val().length <= 2000"
        }
      }
    },
    
    "systemHealth": {
      ".read": "false",
      ".write": "false"
    },
    
    "maintenance": {
      ".read": "auth != null",
      ".write": "false"
    },
    
    ".read": "auth != null",
    ".write": "auth != null && (!root.child('rateLimiting').child(auth.uid).exists() || root.child('rateLimiting').child(auth.uid).child('lastWrite').val() < (now - 100))"
  }
}
