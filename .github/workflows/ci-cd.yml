name: Complete CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  FLUTTER_VERSION: '3.32.8'

jobs:
  # Quality Gates
  code-quality:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Check formatting
        run: dart format --output=none --set-exit-if-changed .

      - name: Create Firebase options file
        run: |
          cp lib/firebase_options.dart.example lib/firebase_options.dart

      - name: Analyze code
        run: flutter analyze --fatal-infos

      - name: Check import sorting
        run: dart run import_sorter:main --no-comments --exit-if-changed

  # Security Checks
  security-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security audit
        run: |
          echo "🔍 Scanning for security vulnerabilities..."
          grep -r "TODO.*security\|FIXME.*security\|password\|secret\|token" lib/ || echo "No obvious security issues found"

      - name: Check Firebase rules
        run: |
          if [ -f "database.rules.json" ]; then
            echo "✅ Firebase database rules found"
            cat database.rules.json | jq . > /dev/null || echo "⚠️  Invalid JSON in database rules"
          fi

  # Testing
  test:
    runs-on: ubuntu-latest
    needs: [code-quality, security-scan]
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Create Firebase options file
        run: |
          cp lib/firebase_options.dart.example lib/firebase_options.dart

      - name: Get dependencies
        run: flutter pub get

      - name: Run unit tests
        run: flutter test --exclude-tags firebase --coverage --reporter=github

      - name: Run integration tests
        run: flutter test integration_test/ || echo "Integration tests skipped"

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: coverage/lcov.info
          fail_ci_if_error: false

  # Build for different environments
  build-dev:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop'
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Create Firebase options file
        run: |
          cp lib/firebase_options.dart.example lib/firebase_options.dart

      - name: Get dependencies
        run: flutter pub get

      - name: Build web (development)
        run: |
          flutter build web --release \
            --dart-define=ENVIRONMENT=development \
            --dart-define=FIREBASE_PROJECT_ID=snakes-fight-dev

      - name: Deploy to development
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_DEV }}'
          channelId: live
          projectId: snakes-fight-dev

  build-prod:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Create Firebase options file
        run: |
          cp lib/firebase_options.dart.example lib/firebase_options.dart

      - name: Get dependencies
        run: flutter pub get

      - name: Build web (production)
        run: |
          flutter build web --release -O 4 \
            --dart-define=ENVIRONMENT=production \
            --dart-define=FIREBASE_PROJECT_ID=snakes-fight-prod

      - name: Deploy to production
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}'
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
          channelId: live
          projectId: snakes-fight-prod

  # Mobile builds on release
  build-mobile-release:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release'
    timeout-minutes: 45
    steps:
      - name: Trigger mobile build workflow
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'build-mobile.yml',
              ref: 'main',
              inputs: {
                version: context.payload.release.tag_name.replace('v', ''),
                build_number: context.run_number.toString()
              }
            })

  # Performance monitoring
  performance-check:
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Create Firebase options file
        run: |
          cp lib/firebase_options.dart.example lib/firebase_options.dart

      - name: Get dependencies
        run: flutter pub get

      - name: Build web for performance analysis
        run: flutter build web --release -O 4

      - name: Analyze bundle size
        run: |
          WEB_SIZE=$(du -sh build/web | cut -f1)
          echo "Web build size: $WEB_SIZE"
          
          # Check if build is under 10MB
          SIZE_BYTES=$(du -sb build/web | cut -f1)
          MAX_SIZE=$((10 * 1024 * 1024))  # 10MB in bytes
          
          if [ $SIZE_BYTES -gt $MAX_SIZE ]; then
            echo "⚠️  Build size ($WEB_SIZE) exceeds 10MB limit"
            exit 1
          else
            echo "✅ Build size within limits"
          fi

  # Deployment status
  deployment-status:
    runs-on: ubuntu-latest
    needs: [build-dev, build-prod, build-mobile-release]
    if: always()
    steps:
      - name: Report deployment status
        run: |
          echo "## Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.build-dev.result }}" == "success" ]; then
            echo "| Development | ✅ Deployed |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-dev.result }}" == "skipped" ]; then
            echo "| Development | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Development | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.build-prod.result }}" == "success" ]; then
            echo "| Production | ✅ Deployed |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-prod.result }}" == "skipped" ]; then
            echo "| Production | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Production | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.build-mobile-release.result }}" == "success" ]; then
            echo "| Mobile Apps | ✅ Building |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.build-mobile-release.result }}" == "skipped" ]; then
            echo "| Mobile Apps | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Mobile Apps | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi
