name: Build Mobile Apps

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build'
        required: true
        default: '1.0.0'
      build_number:
        description: 'Build number'
        required: true
        default: '1'

env:
  FLUTTER_VERSION: '3.27.0'

jobs:
  build-android:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Get dependencies
        run: flutter pub get

      - name: Configure Android signing
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 -d > android/app/keystore.jks
          echo "storeFile=keystore.jks" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties
          echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties

      - name: Build APK
        run: |
          flutter build apk --release --split-per-abi \
            --dart-define=ENVIRONMENT=production \
            --dart-define=FIREBASE_PROJECT_ID=snakes-fight-prod

      - name: Build App Bundle
        run: |
          flutter build appbundle --release \
            --dart-define=ENVIRONMENT=production \
            --dart-define=FIREBASE_PROJECT_ID=snakes-fight-prod

      - name: Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-${{ github.sha }}
          path: build/app/outputs/flutter-apk/*.apk
          retention-days: 30

      - name: Upload App Bundle artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-aab-${{ github.sha }}
          path: build/app/outputs/bundle/release/*.aab
          retention-days: 30

      - name: Upload to Play Store
        if: startsWith(github.ref, 'refs/tags/v')
        uses: r0adkll/upload-google-play@v1.1.3
        with:
          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
          packageName: com.snakesfight.game
          releaseFiles: build/app/outputs/bundle/release/*.aab
          track: production
          status: completed
          inAppUpdatePriority: 2

  build-ios:
    runs-on: macos-latest
    timeout-minutes: 45
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Import signing certificates
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.IOS_P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.IOS_BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build iOS
        run: |
          flutter build ios --release --no-codesign \
            --dart-define=ENVIRONMENT=production \
            --dart-define=FIREBASE_PROJECT_ID=snakes-fight-prod

      - name: Build and Archive
        run: |
          cd ios
          xcodebuild -workspace Runner.xcworkspace \
                     -scheme Runner \
                     -configuration Release \
                     -destination generic/platform=iOS \
                     -archivePath build/Runner.xcarchive \
                     archive

      - name: Export IPA
        run: |
          cd ios
          xcodebuild -exportArchive \
                     -archivePath build/Runner.xcarchive \
                     -exportPath build \
                     -exportOptionsPlist ExportOptions.plist

      - name: Upload IPA artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa-${{ github.sha }}
          path: ios/build/*.ipa
          retention-days: 30

      - name: Upload to TestFlight
        if: startsWith(github.ref, 'refs/tags/v')
        uses: apple-actions/upload-testflight-build@v1
        with:
          app-path: ios/build/Runner.ipa
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}

  cleanup:
    runs-on: ubuntu-latest
    needs: [build-android, build-ios]
    if: always()
    steps:
      - name: Clean up keystore files
        run: |
          rm -f android/app/keystore.jks || true
          rm -f android/key.properties || true
